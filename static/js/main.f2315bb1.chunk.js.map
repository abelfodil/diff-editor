{"version":3,"sources":["LanguageSelector.tsx","Editor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["supportedLanguages","useStyles","makeStyles","theme","createStyles","formControl","margin","spacing","minWidth","selectEmpty","marginTop","LanguageSelector","props","classes","React","useState","language","setLanguage","FormControl","className","InputLabel","id","Select","labelId","value","onChange","event","target","onLanguageChange","map","index","MenuItem","key","Editor","height","options","originalEditable","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2SAIMA,EAAqB,CAAC,MAAO,SAAU,MAAO,aAAc,KAAM,OAAQ,OAAQ,aAAc,OAAQ,SAAU,MAAO,WAAY,MAAO,SAAU,OAAQ,QAAS,MAAO,aAAc,MAAO,QAEnMC,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,YAAa,CACTC,OAAQH,EAAMI,QAAQ,GACtBC,SAAU,KAEdC,YAAa,CACTC,UAAWP,EAAMI,QAAQ,SAmCtBI,EAzBU,SAACC,GACtB,IAAMC,EAAUZ,IADuC,EAEvBa,IAAMC,SAAS,cAFQ,mBAEhDC,EAFgD,KAEtCC,EAFsC,KASvD,OACI,kBAACC,EAAA,EAAD,CAAaC,UAAWN,EAAQR,aAC5B,kBAACe,EAAA,EAAD,CAAYC,GAAG,yBAAf,YACA,kBAACC,EAAA,EAAD,CACIC,QAAQ,wBACRC,MAAOR,EACPS,SAXS,SAACC,GAClBT,EAAYS,EAAMC,OAAOH,OACzBZ,EAAMgB,iBAAiBF,EAAMC,OAAOH,SAW3BxB,EAAmB6B,KAAI,SAACb,EAAUc,GAC/B,OAAO,kBAACC,EAAA,EAAD,CAAUP,MAAOR,EAAUgB,IAAG,mBAAcF,IAAUd,SCrBlEiB,EAhBA,WAAO,IAAD,EACenB,IAAMC,SAAS,cAD9B,mBACVC,EADU,KACAC,EADA,KAGjB,OACI,6BACI,kBAAC,EAAD,CAAkBW,iBAAkBX,IACpC,kBAAC,mBAAD,CACIiB,OAAO,OACP/B,MAAM,UACNa,SAAUA,EACVmB,QAAS,CAAEC,kBAAkB,OCL9BC,EANH,kBACV,6BACE,kBAAC,EAAD,QCOEC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MClGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiBnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIsB,IACpBC,eACA9B,OAAOC,SAAS8B,MAEJC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,eAAN,sBAEPhC,IAgEV,SAAiCO,EAAeC,GAE9C4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.f2315bb1.chunk.js","sourcesContent":["import React from \"react\";\nimport Select from '@material-ui/core/Select';\nimport { MenuItem, makeStyles, FormControl, InputLabel, Theme, createStyles } from \"@material-ui/core\";\n\nconst supportedLanguages = ['cpp', 'csharp', 'css', 'dockerfile', 'go', 'html', 'java', 'javascript', 'json', 'kotlin', 'lua', 'markdown', 'php', 'python', 'rust', 'shell', 'sql', 'typescript', 'xml', 'yaml']\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }),\n);\n\n\ninterface LanguageSelectorProps {\n    onLanguageChange: Function;\n}\n\nconst LanguageSelector = (props: LanguageSelectorProps) => {\n    const classes = useStyles();\n    const [language, setLanguage] = React.useState('javascript');\n\n    const handleChange = (event: any) => {\n        setLanguage(event.target.value);\n        props.onLanguageChange(event.target.value);\n    };\n\n    return (\n        <FormControl className={classes.formControl}>\n            <InputLabel id=\"language-select-label\">Language</InputLabel>\n            <Select\n                labelId=\"language-select-label\"\n                value={language}\n                onChange={handleChange}\n            >\n                {supportedLanguages.map((language, index) => {\n                    return <MenuItem value={language} key={`language-${index}`}>{language}</MenuItem>\n                })}\n            </Select>\n        </FormControl>\n    );\n};\n\nexport default LanguageSelector;\n","import React from \"react\";\nimport { MonacoDiffEditor } from \"react-monaco-editor\";\nimport LanguageSelector from \"./LanguageSelector\";\n\nconst Editor = () => {\n    const [language, setLanguage] = React.useState('javascript');\n\n    return (\n        <div>\n            <LanguageSelector onLanguageChange={setLanguage} />\n            <MonacoDiffEditor\n                height=\"90vh\"\n                theme=\"vs-dark\"\n                language={language}\n                options={{ originalEditable: true }}\n            />\n        </div>\n    );\n};\n\nexport default Editor;\n","import React from \"react\";\nimport Editor from \"./Editor\";\n\nconst App = () => (\n  <div>\n    <Editor />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}